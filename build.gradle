buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}


plugins {
    id "nebula.os-package" version "2.2.6"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'os-package-base'
apply plugin: 'release'


sourceCompatibility = 1.8

group = 'com.scopely'
mainClassName = 'com.scopely.infrastructure.kinesis.KinesisVcr'

repositories {
    jcenter()
    mavenCentral()
}

ext.awsSdkVersion = '1.9.34'

configurations {
    compile.exclude group: 'commons-logging'
}

dependencies {
    compile ('com.amazonaws:amazon-kinesis-connectors:1.1.1') {
        // Exclude dependency on all of the SDK
        exclude group: 'com.amazonaws'
    }
    compile ('com.amazonaws:amazon-kinesis-client:1.2.1') {
        // Exclude dependency on all of the SDK
        exclude group: 'com.amazonaws'
    }
    compile "com.amazonaws:aws-java-sdk-s3:${project.ext.awsSdkVersion}"
    compile "com.amazonaws:aws-java-sdk-kinesis:${project.ext.awsSdkVersion}"
    compile "com.amazonaws:aws-java-sdk-dynamodb:${project.ext.awsSdkVersion}"
    compile "com.amazonaws:aws-java-sdk-cloudwatch:${project.ext.awsSdkVersion}"

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-simple:1.7.12'
    compile 'com.intellij:annotations:12.0'

    // testing dependencies
    testCompile 'junit:junit:4.11'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'org.mockito:mockito-all:1.10.7'
    testCompile 'org.codehaus.groovy:groovy-all:2.3.0'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

//    compile 'ch.qos.logback:logback-classic:1.1.3'
    runtime 'org.codehaus.groovy:groovy:2.3.3'
    compile 'org.slf4j:jcl-over-slf4j:1.7.7'
}


ospackage {
    packageName project.name

    requires('oracle-java8-installer')

    into "/opt/scopely/${project.name}"
    from ("${project.buildDir}/scripts") {
        into 'bin'
    }

    from(project.jar.outputs.files) {
        into 'lib'
    }

    from(project.configurations.runtime) {
        into 'lib'
    }
}

project.tasks.createReleaseTag.dependsOn buildDeb
//
//task scopelyRelease(type: BaseTask) {
//    dependsOnOrdered(['initScmPlugin',
//                      'checkCommitNeeded',
//                      'checkUpdateNeeded',
//                      'unSnapshotVersion',
//                      'confirmReleaseVersion',
//                      'checkSnapshotDependencies',
//                      'preTagCommit',
//                      'buildDeb',
//                      'createReleaseTag',
//                      'updateVersion',
//                      'commitNewVersion'])
//}


public class BaseTask extends DefaultTask {
    Task task(String taskName) {
        def taskParts = taskName.split(':')
        if (taskParts.length == 1) {
            project.tasks.getByName(taskName)
        } else if (taskParts.length == 2) {
            def subprojectName = taskParts[0]
            def subprojectTask = taskParts[1]
            def subproject = project.subprojects.find { it.name == subprojectName }

            subproject.tasks.getByName(subprojectTask)
        } else {
            throw new IllegalArgumentException("Invalid task name format: $taskName")
        }
    }

    void dependsOnOrdered(def tasks) {
        tasks.each { t -> dependsOn(task(t)) }
        for (int i = 1; i < tasks.size(); i++) {
            def pre = task(tasks.get(i - 1))
            def post = task(tasks.get(i))
            post.mustRunAfter(pre)
        }
    }
}
